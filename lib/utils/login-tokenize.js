/*
 * Login Tokenizers are for cross-installation and/or cross-branch guest Users.
 * This utility module provides the ability to create tokens good for installation-or-branch-specific login links.
 */

(function($) { // Below, $ is the same thing as `module.exports`.
  var bcrypt = require('bcrypt-node'),
    path = require('path');
  var nonces = require(path.join(process.cwd(), 'lib', 'utils', 'nonces.js'));
  var secret = CONFIG[CONFIG.environment].sessions.secret; // Get secret key

  /**
   * Generates a token for guest login to an installation
   * Should be passed through GET variable `guest_login_token`
   *
   * @param string installToLogin (required) The installation slug or ID the User wants to log in to
   * @param int    time           (optional) Time for the link to be sensitive to. Tokens are good for up to 1 hour past time defaults to `Date.now()`
   *
   * @return string base64 encoded token value to be appended to URL via GET variable
   */
  $.generateInstallToken = function(installToLogin, time) {
    // If not set, time = current time
    time = time || Date.now(); // If not set, make time current timestamp
    var nonce = nonces.getUserNonce('cross-install-or-branch-login'); // Get nonce based on current User IP or session key (used for referencing )

    var hash = bcrypt.hashSync(new Buffer(secret + nonce + installToLogin + time).toString('utf8')); // Generate hash with userID, secret key, nonce, and time
    return new Buffer(hash + '|' + nonce + '|' + time).toString('base64'); // return hash + nonce (or ability to retrieve it), and time
    // base64 to reduce User awareness of what the link does
  };

  /**
   * Generates a token for guest login to a branch within an installation (this is a wrapper for `$.generateInstallToken`)
   * Should be passed through GET variable `guest_login_token`
   *
   * @param string installToLogin (required) The installation slug or ID the User wants to log in to
   * @param int    time           (optional) Time for the link to be sensitive to. Tokens are good for up to 60 seconds past time defaults to `Date.now()`
   *
   * @return string base64 encoded token value to be appended to URL via GET variable
   */
  $.generateBranchToken = function(baseInstallation, branchToLogin, time) {
    return $.generateInstallToken(baseInstallation + '-' + branchToLogin, time);
  };

  // Attempts to verify a token's validity for a given Installation or Branch
  // Takes the base64 encoded string created by `$.generateInstallToken`;

  /**
   * Verifies tokens created by `$.generateInstallToken` and `$.generateBranchToken`
   *
   * @param string token                  (required) The base64 encoded token generated by the other methods in this module
   * @param string currentInstallOrBranch (required) The installation slug or ID used by the generator at the time of tokenization
   */
  $.attemptVerifyToken = function(token, currentInstallOrBranch) {
    if (!token) return false;
    token = new Buffer(token, 'base64').toString('utf8');

    var splitToken = token.split('|', 3); // Split token into segments relating to data required to regenerate hash
    var hash = splitToken[0],
      nonce = splitToken[1],
      time = splitToken[2],
      userData; // hash, nonce, time set

    if (time - Date.now() > 1000 * 60 * 60) return false; // Make sure time set is not older than 1 minute
    if (!(userData = nonces.verifyNonce(nonce, 'cross-install-or-branch-login'))) return false; // Make sure nonce value is good

    if (!bcrypt.compareSync(new Buffer(secret + nonce + currentInstallOrBranch + time).toString('utf8'), hash))
      return false; // Compares hash values to determine if this is a good token or not

    return userData;
  };
})(module.exports);
