/*
 * Nonces are "number onces". They are used to verify GET or POST variables are coming from the correct User
 * and to do the right thing. This is used for cross-installation or cross-branch communication.
 *
 * These numbers can only be verified once, and should be generated any time there is a User-specific interaction
 * that could be abused to cause "bad things" to happen.
 *
 * It's being loaded as a utility module as it can and should be used in many different situations and files
 */

// Global reference to nonces so that multiple installations and instances of this file can verify all nonces
global.nonces = global.nonces || {};

(function($) { // Below, $ is the same thing as `module.exports`.
  var crypto = require('crypto');

  /**
   * Generates an nonce for later validation
   * Nonces are 15 character strings with an appended timestamp to prevent overwriting due to duplicate random strings
   *
   * @param Object req      (required) Request Object (to find `req.user.info`).
   * @param string reason   (optional) Reason code for verifying that nonce is being used for what it was intended for.
   * @param int    duration (optional) How long the nonce should last in milliseconds. Default 1 hour.
   *
   * @return string The properly-formatted nonce value
   */
  $.get_user_nonce = function(req, reason, duration) {
    // Providing a reason variable here provides an additional layer of security to the nonce value, by locking nonce
    // values to certain processes. It's highly recommended to use a reason code anywhere that personal data is protected
    // by the system

    var nonceStor = {}; // Nonce information object
    nonceStor.reason = reason || false;
    nonceStor.userData = req.user.info; // This can be changed in the future to include more/less data
    nonceStor.setTime = Date.now();
    nonceStor.duration = duration || 1000 * 60 * 60; // Standard duration for nonce value is 1 minute

    var thisNonce = crypto.randomBytes(15).toString('hex') + Date.now();
    global.nonces[thisNonce] = nonceStor;

    return thisNonce;
  };

  /**
   * Verifies an nonce value generated by `$.get_user_nonce`
   *
   * @param string nonce  (required) The nonce value to validate
   * @param string reason (optional) The reason code used when generating the nonce
   *
   * @return bool|UserInfo Returns false if nonce invalid. UserInfo Object if successful.
   */
  $.verify_nonce = function(nonce, reason) {
    var time = Date.now(),
      match; // Get current time for future reference, and instantiate `match` variable

    if (!nonce) return false;

    if (!(match = global.nonces[nonce])) return console.log('none in global object'); // If no match for nonce slug found, return false
    if (reason && match.reason !== reason || match.reason && !reason) return false; // Ensure reason code matches (if necessary)
    if (time - match.setTime > match.duration) return false; // Make sure we haven't passed the duration

    delete global.nonces[nonce]; // This nonce can only be used once
    return match.userData; // For reference outside of this process
  };

  /**
   * This function is specifically used to keep memory usage by this utility in check.
   * It's set to be leveraged every 2 minutes below this function.
   */
  $.clearOldNonces = function() { // This method is public in case it becomes necessary to clear this object manually
    var nonces = global.nonces,
      time = Date.now();

    for (n in nonces)
      if (nonces.hasOwnProperty(n))
        if (time - n.setTime > n.duration)
          delete nonces[n];
  };

  if (!global.isNonceRunning) { // We must set a global variable here, as multiple instances of this file may be active
    setInterval($.clearOldNonces, 1000 * 60 * 2); // Clear old nonces every 2 minutes
    global.isNonceRunning = true;
  }
})(module.exports);
